import org.apache.tools.ant.util.TeeOutputStream

plugins {
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '2.8'
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'nicktindall_java-raft'
        property 'sonar.organization', 'nicktindall'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.login', '74ce1c65bd9ae5f476d0cb81a500d371680fe7c6'
    }
}

jacoco {
    toolVersion = '0.8.5'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

group 'id.au.tindall.distalg'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.11

repositories {
    mavenCentral()
}

def mockitoVersion = '3.3.3'
def log4jVersion = '2.13.3'

dependencies {
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: mockitoVersion
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.16.1'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.9.0'
}

test {
    useJUnitPlatform()
}

// Repeat the LiveServerTest (long run) until failure
task longRunTest(type: JavaExec) {
    doFirst {
        standardOutput = new TeeOutputStream(
                new FileOutputStream("longRunTest.out.txt"), System.out);
    }
    dependsOn classes
    jvmArgs("-XX:+FlightRecorder", "-XX:StartFlightRecording=disk=true,maxsize=4GB,filename=" + project.projectDir + "/longRunTest.jfr", "-Xlog:jfr=debug")
    systemProperties("LiveServerTest.longRun": "true")
    workingDir = file(buildDir)
    classpath = sourceSets.test.runtimeClasspath
    main = "au.id.tindall.distalg.raft.LiveServerTest"
}
